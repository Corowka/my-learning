import bigInt from "big-integer"

const C1 = bigInt("26551204258843745363945817344542712231853697825611819364782666511189181163055074051476329215458377726263020093498679370039708801535664814328162692150210451381751753830006940040827979950558050282714194381034092883939262096141008819292495931211728031785755121330702742128817690537253551665208978725111706150491754551007770806914411121076070020583033128470306529376739123792005917290158912820010009808172234521055509234590920957906177557358540680434384817775539026514010252862862839027073850268224750404634473463618777006357818721724797929923529012600510535095610918586614029679646651465306511812382640146943478994674256");
const C2 = bigInt("15078955642319425728202158499498211846864930843176897808974055856968529529097424616368831213912291041624048964732246132765856975476052668289715939203413887887382202941164061347069691765437566861753667748075282386636627465164906932010816597722984746921186337578270200129873282920068784201514021109415820528991104937060172081674781608577227071061197692505175378044415915151080560589405776016562396208717876936344437428243807952005683645941634071371388354684499458718069293728600991163365021940709794036387279706726070528681688275037525151348453618977170749033423640313731255262389955178031299401129108617906101007656599");
const C3 = bigInt("23891847994751999621101295062997380005164020954590423428042171529302832011154317778299381908731871196008580777222749172147006810528906271341308184385120179796027683152931961967382314486613167631788678276387211350776249837579390015165757864208318223816558947798135679038013504855158292685101457279972020297162641315507901306013738635850731447317326678805537519441953032810925704075589939125805677903347490492219743575661534789447940563503856110492293399124190689563382967953133694736199676552358617918947674484508638722230644077229980706479571773485888633920607771364828172970606781896979374187425934680875269381339362");
const N1 = bigInt("28364908331436398170143487602265695320987180022393232933891182634235715362940780492480872769082414313534881446526873986530260669212114173944373823751276546683020084086634021113790124845544411123893065423521662652371993167946785623776037246771353510258906156655605898968543818358631927055434211553382498330608366834108925808725213395160292375996244811457440710707099044226961500049105677797583397617359174447839225584692546815995703434636593509611447872417934749286148907315075252680266612972211422972167350495787447309046492205083010414214692397134673546599814210088860908011027359948762393899640641674954136127597817");
const N2 = bigInt("15923891510484957226651705247686912442387119646389073329462997147205414975317585960795774481737199571529960474492152218379161470458762043192118125418121875856052578640979011515296099191500589140006094823261308413254543877379258144305938331734861173356619090681721821307853301612187949985093621426904361317433888042789125313502593129649312075037212796405660355669475942222595788656559505956219725292193406275834873151142688602729958349632451102281818624070035860958168232783055163423921274215081400845008215753168492011304860249761684268851476278657733274269848581844321877966083950091054097956135808655382008076799103");
const N3 = bigInt("24566958084192286705910304305029251582998497465929217897166639700509237574796043505306197105296785880564474402676752535274500894997651255631902172020105876772267343700045322272911662857659970525606255596164887957577240565454031304829362072545047547083934782926807428798068899311550985949583809250341881624137377601338012435090169419059772260303829068465864656400681892533335209530064362359337975387524918494034360095779743489044000426975400813797073883048345034593060213782234676262839682587875821276456132959473217869638242394040244858767462633012020887386942677036272116769019333036499635899214301094454015108134289");

const M0 = N1.multiply(N2).multiply(N3)
const m1 = N2.multiply(N3)
const m2 = N1.multiply(N3)
const m3 = N1.multiply(N2)
const n1 = m1.modInv(N1)
const n2 = m2.modInv(N2)
const n3 = m3.modInv(N3)
const S = C1.multiply(n1).multiply(m1).add(C2.multiply(n2).multiply(m2)).add(C3.multiply(n3).multiply(m3))
const M = S.mod(M0)

const nthRoot = (value, n) => {
  let x = bigInt(1), previous;
  do { previous = x; x = previous.multiply(n - 1).add(value.divide(previous.pow(n - 1))).divide(n); } while (previous.compare(x) !== 0);
  return x;
};

const binaryToTextWin1251 = (binaryStr) => {
  const byteArray = binaryStr.match(/.{1,8}/g).map(byte => parseInt(byte, 2));
  return new TextDecoder('windows-1251').decode(new Uint8Array(new Uint8Array(byteArray)));
};

console.log(binaryToTextWin1251(nthRoot(M, 3).toString(2)))