import { NextRequest } from "next/server"

import { ResponseTemplate, withRetry } from "../../utils"

const getPrompt = (text: string) => {
  return `Сейчас я дам тебе ответы пользователя на вопросы по профориентации, твоя задача сделать целочисленную оценку от 0 до 10 по следующим критериям: 
  1. Аналитическое мышление
  Описание: способность анализировать данные, находить закономерности, прогнозировать результаты и принимать решения на основе логики.
  Оценка 0: Не способен интерпретировать сложные данные, часто упускает важные детали.
  Оценка 5: Может анализировать данные при наличии чётких инструкций и решать стандартные задачи.
  Оценка 10: Умеет работать с большими массивами данных, находит взаимосвязи даже в сложных условиях.
  2. Коммуникативные навыки
  Описание: умение ясно выражать свои мысли, слушать и эффективно взаимодействовать с окружающими.
  Оценка 0: С трудом доносит информацию, часто вызывает недопонимание.
  Оценка 5: Умеет поддерживать разговор в обычных ситуациях, но испытывает сложности с убеждением.
  Оценка 10: Легко находит общий язык, убеждает в своих идеях, выступает перед большой аудиторией.
  3. Творческое мышление
  Описание: способность генерировать новые идеи и нестандартные решения.
  Оценка 0: Не склонен к оригинальным решениям, следует только шаблонам.
  Оценка 5: Может предложить свежую идею в рамках ограниченных задач.
  Оценка 10: Постоянно создаёт инновационные идеи, вдохновляя других.
  4. Физическая выносливость
  Описание: способность выдерживать физические нагрузки длительное время.
  Оценка 0: Устаёт быстро, не может выполнять тяжёлую физическую работу.
  Оценка 5: Может справляться с умеренными нагрузками, требующими регулярного перерыва.
  Оценка 10: Способен выдерживать длительные нагрузки без снижения эффективности.
  5. Лидерство
  Описание: умение брать на себя ответственность, организовывать и мотивировать команду.
  Оценка 0: Избегает ответственности, не умеет вести за собой.
  Оценка 5: Может руководить командой при наличии ясного плана.
  Оценка 10: Легко берёт ответственность за сложные проекты, вдохновляет других.
  6. Работа с техническим оборудованием
  Описание: умение работать с инструментами, машинами или специализированными устройствами.
  Оценка 0: Не знает, как пользоваться даже простым оборудованием.
  Оценка 5: Справляется с настройкой и использованием техники при инструктаже.
  Оценка 10: Легко разбирается с новым оборудованием и обучает других.
  7. Организационные способности
  Описание: умение планировать, распределять задачи и управлять временем.
  Оценка 0: Неорганизован, забывает о сроках и обязательствах.
  Оценка 5: Умеет организовать небольшие процессы и контролировать их выполнение.
  Оценка 10: Эффективно управляет сложными проектами с несколькими этапами.
  8. Устойчивость к стрессу
  Описание: способность сохранять работоспособность в условиях давления.
  Оценка 0: Легко теряется в сложных ситуациях, не может продолжать работу.
  Оценка 5: Сохраняет спокойствие в большинстве рабочих ситуаций.
  Оценка 10: Легко работает под давлением, принимает взвешенные решения.
  9. Эмпатия
  Описание: способность понимать чувства других людей и сопереживать им.
  Оценка 0: Не замечает эмоций окружающих, избегает общения.
  Оценка 5: Понимает эмоциональное состояние других, но не всегда готов помочь.
  Оценка 10: Всегда замечает эмоциональные изменения и поддерживает окружающих.
  10. Мелкая моторика и точность
  Описание: способность выполнять точные движения с использованием мелкой моторики.
  Оценка 0: Плохо справляется с мелкими деталями.
  Оценка 5: Уверенно выполняет задачи, требующие средней точности.
  Оценка 10: Выполняет сложные задачи с высокой точностью.
  11. Быстрая реакция
  Описание: способность быстро реагировать на изменения и принимать решения.
  Оценка 0: Долго думает, замедляет процесс работы.
  Оценка 5: Реагирует быстро в большинстве случаев, но допускает ошибки в стрессе.
  Оценка 10: Всегда мгновенно реагирует и принимает точные решения.
  12. Навыки самообучения
  Описание: способность самостоятельно осваивать новую информацию и применять её на практике.
  Оценка 0: Не проявляет интереса к обучению, требует постоянного руководства.
  Оценка 5: Осваивает новые навыки при наличии руководства.
  Оценка 10: Быстро и самостоятельно учится новому, внедряя это в работу.
  Формат вывода ответа следующий, ты пишешь название критерия, замет через дефис оценку, которую ты дал этому критерию в соответствии с описанием пользователя, например:
  Аналитическое мышление - 10
  Коммуникативные навыки - 3
  Творческое мышление - 4
  Физическая выносливость - 9
  Лидерство - 1
  Работа с техническим оборудованием - 4
  Организационные способности - 6
  Устойчивость к стрессу - 7
  Эмпатия - 5
  Мелкая моторика и точность - 2
  Быстрая реакция - 5
  Навыки самообучения - 1
  Вот описание пользователя: ${text}`
}

const extractCriteriaScores = (text: string) => {
  const criteriaRegex = /[-–]\s*(\d+)/g
  const thinkEndIndex = text.indexOf("</think>\n\n")
  if (thinkEndIndex === -1) {
    console.error("Тег </think> не найден!")
    return []
  }
  const withoutThink = text.slice(thinkEndIndex + "</think>\n\n".length)
  const matches = [...withoutThink.matchAll(criteriaRegex)]
  const scores = matches.map((match) => parseInt(match[1], 10))
  return scores
}

const timeout = 1000000

const controller = new AbortController()
const id = setTimeout(() => controller.abort(), timeout)

const originalPOST = async (req: NextRequest) => {
  try {
    const data = await req.json()
    if (!data?.text) {
      return ResponseTemplate(400, "Invalid AI evaluate request data: Missing text.")
    }
    const text = getPrompt(data.text)
    const payload = {
      model: "r1-1776",
      messages: [{ role: "user", content: text }],
      max_tokens: 2000,
    }
    const headers = {
      Authorization: `Bearer ${process.env.PERPLEXITY_API_TOKEN}`,
      "Content-Type": "application/json",
    }
    const response = await fetch("https://api.perplexity.ai/chat/completions", {
      method: "POST",
      headers,
      body: JSON.stringify(payload),
    })
    clearTimeout(id)
    if (!response.ok) {
      return ResponseTemplate(400, `AI Evaluate request failed`)
    }
    const result = await response.json()
    const resultText = result.choices[0].message.content
    if (!resultText) {
      return ResponseTemplate(400, "AI Evaluate returned invalid data.")
    }
    const scores = extractCriteriaScores(resultText)
    if (scores.length !== 12) {
      return ResponseTemplate(400, "AI Evaluate returned invalid data.")
    }
    return ResponseTemplate(200, "AI Evaluate response", {
      text: resultText,
      scores,
    })
  } catch (error) {
    console.error(`Error during AI Evaluate request: ${(error as Error).message}`)
    return ResponseTemplate(500, `Internal Server Error: ${(error as Error).message}`)
  }
}

export const POST = withRetry(originalPOST, 5, 1000)
