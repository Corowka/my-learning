import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import { useAuth } from "@/contexts/auth-context";
import { doSignOut } from "@/utils/auth-handlers";
import { User, Stats } from "@/types";
import { WeekGraphic } from "@/components/modules/graphic/graphic";
import { LevelWidget } from "@/components/pages/dashboard/level-widget/level-widget";
import styles from "./dashboard.module.css";
import { ip, port } from "@/constants";
import { useEffect, useState } from "react";
import { CardRoll } from "@/components/modules/card-roll/card-roll";
import { StatsApi } from "@/utils/firestore/stats-api";
import { getWeekAgoDateTimestamp } from "@/utils/time/get-week-ago-date-timestamp";
import { getCurrentDateTimestamp } from "@/utils/time/get-current-date-timestamp";
import { splitStatsToDays } from "@/utils/stats/sptit-stats-to-days";
import { convertStatsToTime } from "@/utils/stats/convert-stats-to-time";
import { convertStatsToActions } from "@/utils/stats/convert-stats-to-actions";
import { WEEK_DAY_NAMES_SHORTED, DAY_TIMESTAMP } from "@/utils/time/constants";
import { convertTimestampToHours } from "@/utils/time/convert-timestamp-to-hours";

type Data = {
  label: string;
  value: number;
}[];

export default function Dashboard() {
  const { currentUser } = useAuth();
  const [statsGraphicValues, setStatsGraphicValues] = useState<null | {
    timePerDay: number[];
    actionsPerDay: number[];
    productivityPerDay: number[];
  }>(null);
  const [isCardRollShow, setIsCardRollShow] = useState<boolean>(true);

  useEffect(() => {
    (async () => {
      const today = new Date();
      const start = getWeekAgoDateTimestamp() + DAY_TIMESTAMP;
      const end = getCurrentDateTimestamp() + DAY_TIMESTAMP;
      const uid = (currentUser as User).uid;

      const stats = await StatsApi.getStats(uid, start, end);
      console.log(stats);
      if (!stats) return;

      const statsPerDay = splitStatsToDays(stats);

      console.log(statsPerDay);

      const timePerDay = statsPerDay.map(
        (stats) =>
          Math.round(convertTimestampToHours(convertStatsToTime(stats)) * 100) /
          100
      );
      const actionsPerDay = statsPerDay.map((stats) =>
        convertStatsToActions(stats)
      );
      const productivityPerDay = new Array(7)
        .fill(null)
        .map((_, i) =>
          timePerDay[i] !== 0
            ? Math.round((actionsPerDay[i] / timePerDay[i]) * 100) / 100
            : 0
        );

      const newStatsGraphicValues = {
        timePerDay,
        actionsPerDay,
        productivityPerDay,
      };

      console.log(newStatsGraphicValues);

      setStatsGraphicValues(newStatsGraphicValues);
    })();
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>Dashboard</h1>

      {isCardRollShow && <CardRoll setClose={() => setIsCardRollShow(false)} />}

      <div className={styles.wrapper}>
        <div className={styles.columnWrap}>
          <div className={styles.graphicContent}>
            {statsGraphicValues && (
              <WeekGraphic
                labels={WEEK_DAY_NAMES_SHORTED}
                values={statsGraphicValues.timePerDay}
                title="Time on Week"
                labelName="hours"
                color="#25aae1aa"
              />
            )}
          </div>
          <div className={styles.graphicContent}>
            {statsGraphicValues && (
              <WeekGraphic
                labels={WEEK_DAY_NAMES_SHORTED}
                values={statsGraphicValues.actionsPerDay}
                title="Actions on Week"
                labelName="actions"
                color="#00a153aa"
              />
            )}
          </div>
          <div className={styles.graphicContent}>
            {statsGraphicValues && (
              <WeekGraphic
                labels={WEEK_DAY_NAMES_SHORTED}
                values={statsGraphicValues.productivityPerDay}
                title="Productivity on Week"
                labelName="act/h"
                color="#ff22ffaa"
              />
            )}
          </div>
        </div>
        <div className={styles.columnWrap}>
          <LevelWidget
            level={1}
            experienceNow={744}
            experienceForNextLevel={1100}
            style={{ marginTop: 20 }}
          />
        </div>
      </div>
    </>
  );
}
